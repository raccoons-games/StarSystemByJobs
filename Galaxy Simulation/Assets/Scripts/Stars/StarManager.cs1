using System.Collections;
using System.Collections.Generic;
using Unity.Collections;
using Unity.Jobs;
using Unity.Burst;
using Unity.Mathematics;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Stars
{
    public class StarManager : MonoBehaviour
    {
        [SerializeField]
        private int starCount = 100;

        [SerializeField]
        private Star starOriginal;

        [SerializeField]
        private float spawnRadius = 100;

        [SerializeField]
        private float spawnHeight = 5;

        [SerializeField]
        private float simulationSpeed = 1;

        [SerializeField]
        private Vector2 massRange = new Vector2(0.1f, 1);

        [SerializeField]
        private float maxStartVelocity = 2;

        [SerializeField]
        private bool useJobs = true;

        private Star[] stars;

        
        private void Awake()
        {
            stars = new Star[starCount];
            for (int i=0; i<starCount; i++)
            {
                stars[i] = Instantiate(starOriginal);
                Vector3 starPos = Random.insideUnitSphere;
                starPos.x *= spawnRadius;
                starPos.z *= spawnRadius;
                starPos.y *= spawnHeight;
                stars[i].transform.position = starPos;
                stars[i].Mass = Random.Range(massRange.x, massRange.y);
                stars[i].transform.localScale = stars[i].Mass * stars[i].transform.localScale;
                stars[i].Velocity = Random.insideUnitSphere * maxStartVelocity;
            }

        }

        private void Update()
        {
            if (useJobs)
            {
                NativeArray<StarData> starDatas = new NativeArray<StarData>(starCount, Allocator.TempJob);
                NativeArray<Vector3> outputVelocity = new NativeArray<Vector3>(starCount, Allocator.TempJob);
                NativeArray<float> deltaTime = new NativeArray<float>(1, Allocator.TempJob);
                NativeArray<float> simulationSpeed = new NativeArray<float>(1, Allocator.TempJob);
                deltaTime[0] = Time.deltaTime;
                simulationSpeed[0] = this.simulationSpeed;
                for (int i = 0; i< starCount; i++)
                {
                    starDatas[i] = stars[i].StarData;
                }
                ParallelAccelerationJob parallelAccelerationJob = new ParallelAccelerationJob();
                parallelAccelerationJob.outputVelocity = outputVelocity;
                parallelAccelerationJob.starDatas = starDatas;
                parallelAccelerationJob.simulationSpeed = simulationSpeed;
                parallelAccelerationJob.deltaTime = deltaTime;
                parallelAccelerationJob.Schedule(starCount,1).Complete();
                for (int i = 0; i < starCount; i++)
                {
                    stars[i].Velocity = parallelAccelerationJob.outputVelocity[i];
                }
                starDatas.Dispose();
                outputVelocity.Dispose();
                deltaTime.Dispose();
                simulationSpeed.Dispose();
            }
            else
            {
                for (int i = 0; i < starCount; i++)
                {
                    for (int j = 0; j < starCount; j++)
                    {
                        if (i == j) continue;
                        Vector3 starDir = stars[j].transform.position - stars[i].transform.position;
                        float distance = starDir.magnitude;
                        float acceleration = stars[j].Mass / Mathf.Pow(distance, 2) * Time.deltaTime * simulationSpeed;
                        stars[i].Velocity += acceleration * starDir.normalized;
                    }
                }

                
            }
            for (int i = 0; i < starCount; i++)
            {
                stars[i].transform.position += stars[i].Velocity * Time.deltaTime * simulationSpeed;
            }
        }
    }
}
/*
public struct StarData
{
    public float mass;

    public Vector3 velocity;

    public Vector3 position;
}

public struct ParallelAccelerationJob : IJobParallelFor
{
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<StarData> starDatas;
    [WriteOnly] public NativeArray<Vector3> outputVelocity;
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<float> simulationSpeed;
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<float> deltaTime;

    public void Execute(int index)
    {
        for (int i = 0; i < index; i++)
        {
            ApplyVelocityForStarFrom(index, i);
        }
        for (int i = index + 1; i < starDatas.Length; i++)
        {
            ApplyVelocityForStarFrom(index, i);
        }
    }

    private void ApplyVelocityForStarFrom(int starIndex, int oppositeStarId)
    {
        Vector3 starDir = starDatas[oppositeStarId].position - starDatas[starIndex].position;
        float distance = starDir.magnitude;
        float acceleration = starDatas[oppositeStarId].mass / Mathf.Pow(distance, 2) * deltaTime[0] * simulationSpeed[0];
        outputVelocity[starIndex] = starDatas[starIndex].velocity + acceleration * starDir.normalized;
    }
}
*/

public struct StarData
{
    public float mass;

    public float3 velocity;

    public float3 position;
}

[BurstCompile]
public struct ParallelAccelerationJob : IJobParallelFor
{
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<StarData> starDatas;
    [WriteOnly] public NativeArray<float3> outputVelocity;
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<float> simulationSpeed;
    [NativeDisableParallelForRestriction] [ReadOnly] public NativeArray<float> deltaTime;

    public void Execute(int index)
    {
        for (int i = 0; i < index; i++)
        {
            ApplyVelocityForStarFrom(index, i);
        }
        for (int i = index+1; i < starDatas.Length; i++)
        {
            ApplyVelocityForStarFrom(index, i);
        }
    }

    private void ApplyVelocityForStarFrom(int starIndex, int oppositeStarId)
    {
        float3 starDir = starDatas[oppositeStarId].position - starDatas[starIndex].position;
        
        float distance = math.abs(starDir);
        float acceleration = starDatas[oppositeStarId].mass / Mathf.Pow(distance, 2) * deltaTime[0] * simulationSpeed[0];
        outputVelocity[starIndex] = starDatas[starIndex].velocity + acceleration * starDir.normalized;
    }
}